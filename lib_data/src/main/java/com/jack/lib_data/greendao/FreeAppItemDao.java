package com.jack.lib_data.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jack.lib_data.bean.FreeAppItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FREE_APP_ITEM".
*/
public class FreeAppItemDao extends AbstractDao<FreeAppItem, Long> {

    public static final String TABLENAME = "FREE_APP_ITEM";

    /**
     * Properties of entity FreeAppItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AppId = new Property(1, String.class, "appId", false, "APP_ID");
        public final static Property IconUrl = new Property(2, String.class, "iconUrl", false, "ICON_URL");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Category = new Property(4, String.class, "category", false, "CATEGORY");
        public final static Property Summary = new Property(5, String.class, "summary", false, "SUMMARY");
        public final static Property Artist = new Property(6, String.class, "artist", false, "ARTIST");
        public final static Property Rate = new Property(7, int.class, "rate", false, "RATE");
        public final static Property DownloadCount = new Property(8, int.class, "downloadCount", false, "DOWNLOAD_COUNT");
    }


    public FreeAppItemDao(DaoConfig config) {
        super(config);
    }
    
    public FreeAppItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FREE_APP_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"APP_ID\" TEXT UNIQUE ," + // 1: appId
                "\"ICON_URL\" TEXT," + // 2: iconUrl
                "\"NAME\" TEXT," + // 3: name
                "\"CATEGORY\" TEXT," + // 4: category
                "\"SUMMARY\" TEXT," + // 5: summary
                "\"ARTIST\" TEXT," + // 6: artist
                "\"RATE\" INTEGER NOT NULL ," + // 7: rate
                "\"DOWNLOAD_COUNT\" INTEGER NOT NULL );"); // 8: downloadCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FREE_APP_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FreeAppItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String appId = entity.getAppId();
        if (appId != null) {
            stmt.bindString(2, appId);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(3, iconUrl);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(5, category);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(6, summary);
        }
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(7, artist);
        }
        stmt.bindLong(8, entity.getRate());
        stmt.bindLong(9, entity.getDownloadCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FreeAppItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String appId = entity.getAppId();
        if (appId != null) {
            stmt.bindString(2, appId);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(3, iconUrl);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(5, category);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(6, summary);
        }
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(7, artist);
        }
        stmt.bindLong(8, entity.getRate());
        stmt.bindLong(9, entity.getDownloadCount());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FreeAppItem readEntity(Cursor cursor, int offset) {
        FreeAppItem entity = new FreeAppItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // appId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // iconUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // category
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // summary
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // artist
            cursor.getInt(offset + 7), // rate
            cursor.getInt(offset + 8) // downloadCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FreeAppItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAppId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIconUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCategory(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSummary(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setArtist(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRate(cursor.getInt(offset + 7));
        entity.setDownloadCount(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FreeAppItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FreeAppItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FreeAppItem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
